=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good0.bminor Input]===
f: function void ();
f: function void () = {
    return;
   }
f2: function auto (y: integer) = {
    x: integer = 4;
    return x;

    if (true) {
        return x + 5;
    }

    }
f2: function auto (z: integer);

===[STUDENT TESTS/good0.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good0.bminor Output]===
resolving...
x resolves to local 2
x resolves to local 2

type checking...
type notice: return type of function f2 is now integer
no type error




===[STUDENT TESTS/good1.bminor Input]===
str: string = "bye";
f: function auto () = {
    if (false) {
        return "hello";
    }
    else {
        return str;
    }
}


===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
resolving...
str resolves to global str

type checking...
type notice: return type of function f is now string
no type error




===[STUDENT TESTS/good10.bminor Input]===
x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}
===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
resolving...
a resolves to param 1
b resolves to param 2
a resolves to param 1
b resolves to param 2
x resolves to global x
x resolves to global x
z resolves to param 1
y resolves to local 2
x resolves to global x
y resolves to local 2
b resolves to global b
c resolves to local 3
s resolves to global s
d resolves to local 4
z resolves to param 1
y resolves to local 2
x resolves to global x
y resolves to local 2
min resolves to global min
a resolves to local 5
a resolves to local 5

type checking...
no type error




===[STUDENT TESTS/good2.bminor Input]===
x: integer;
y: boolean;
fxn: function integer (a: boolean, z: integer) = {
    z = x + 3 - 4 * z / x;
    z++;
    -z--;
    x = 3^z^x;
    x = z % x + 2;
    return x + z^2;
}
===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
resolving...
z resolves to param 2
x resolves to global x
z resolves to param 2
x resolves to global x
z resolves to param 2
z resolves to param 2
x resolves to global x
z resolves to param 2
x resolves to global x
x resolves to global x
z resolves to param 2
x resolves to global x
x resolves to global x
z resolves to param 2

type checking...
no type error




===[STUDENT TESTS/good3.bminor Input]===
ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

GetArea: function float ( width: float, height: float ) = {
	return width * height;
}
===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
resolving...
width resolves to param 1
height resolves to param 2

type checking...
no type error




===[STUDENT TESTS/good4.bminor Input]===
testfunc: function void ( x: integer, y:integer, z:integer ) = {
    r: integer;
	b: boolean;

          
	r = (x+y)/z;
	r = x+(y+z);
	b = (true||false) && (false||true);

	r = x+(y/z);
	r = (x+y)+z;
	b = (x+y) < (x+z);
	b = (true&&false) || (false&&true);
}
===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
resolving...
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
b resolves to local 5
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
b resolves to local 5
x resolves to param 1
y resolves to param 2
x resolves to param 1
z resolves to param 3
b resolves to local 5

type checking...
no type error




===[STUDENT TESTS/good5.bminor Input]===
arr: array[1] array[3] array[2] integer = {{{1,2},{3,4}, {5,6}}};
arr2: array[2] integer;
fxn: function boolean () = {
    arr2 = arr[0][1];
    return true;     
}

===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
resolving...
arr2 resolves to global arr2
arr resolves to global arr

type checking...
no type error




===[STUDENT TESTS/good6.bminor Input]===
arr: array [4] auto = {{1,2}, {3,4}, {5,6}, {7,8}};

arr2: array [4] array[2] auto = {{1,2}, {5,6}, {5,6}, {7,8}};
fxn: function void () = {
    a: integer = arr[0][1];    
    b: integer = arr2[0][arr[1][0]];
}
===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
resolving...
arr resolves to global arr
arr2 resolves to global arr2
arr resolves to global arr

type checking...
type notice: type of arr is now array[4] array[2] integer
type notice: type of arr2 is now array[4] array[2] integer
no type error




===[STUDENT TESTS/good7.bminor Input]===
// arrays and changing an element, indexing
a: array[2] auto = {{'c', 'a', 'c'}, {'b', 'd', 'd'}};
f: function void () = {
    a[2][2] = 't';
   }

===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
resolving...
a resolves to global a

type checking...
type notice: type of a is now array[2] array[3] char
no type error




===[STUDENT TESTS/good8.bminor Input]===
f: function integer () ={
    i: integer = 0;
       for (i; i < 5; i++) {
            print i, i*i, f();
       }
       if (3 != 4 + i) {
            print "sad";
       } else {
            print "oof";
       }
    return 3;
}

===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
resolving...
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
f resolves to global f
i resolves to local 1

type checking...
no type error




===[STUDENT TESTS/good9.bminor Input]===
a: integer = 1;
b: integer = 2;
c: boolean = false;
s: string = "hello";
str: string = "ohno";
f: function boolean () = {
    return (a > b) && (a < b) || (a <= b);
    return true;
    return (a >= b) && (a != b) || (a == b);
    return (s == str) || (s != str);
}

===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
resolving...
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
a resolves to global a
b resolves to global b
s resolves to global s
str resolves to global str
s resolves to global s
str resolves to global str

type checking...
no type error




====Bad Tests====
===[STUDENT TESTS/bad0.bminor Input]===
// function with different parameters
f1: function auto (a: boolean) = {
    return 5;
}
f2: function integer (); 
f1: function integer (a: boolean);

===[STUDENT TESTS/bad0.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad0.bminor Output]===
resolving...
resolve error: type f1 does not match




===[STUDENT TESTS/bad1.bminor Input]===
// incorrect return type
testfunc: function void ( x: integer, y: integer, z: integer ) = {
	r: integer;
	b: boolean;
	r = (x + y) / z;
	r = x + (y + z);
	b = (true || false) && (false || true);
	r = x + y / z;
	r = x + y + z;
	b = x + y < x + z;
	b = true && false || false && true;

    return b;
}
===[STUDENT TESTS/bad1.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad1.bminor Output]===
resolving...
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
b resolves to local 5
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
r resolves to local 4
x resolves to param 1
y resolves to param 2
z resolves to param 3
b resolves to local 5
x resolves to param 1
y resolves to param 2
x resolves to param 1
z resolves to param 3
b resolves to local 5
b resolves to local 5

type checking...
type error: return type does not match function declaration type
			function testfunc expects return type of void but received type of boolean




===[STUDENT TESTS/bad10.bminor Input]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
	if (a < b) {
		return a;
	}
	else {
		return b;
	}
}
testfunc: function void ( z: integer ) = {
	y: integer = x * (x * 10 + 55 % 6 + z / 10);
	print "y: ", y, "\n";
	c: boolean = x < 100 && y > 200 ||  ! (b = true);
	print "c: ", c, "\n";
	d: boolean = s == "goodbye";
	print "d: ", d, "\n";
	z = y = x;
	a: array[100] integer;
	y = min(a[10], a[20]);
	f: float = 3.4 + 5.6;
	g: float = 3.41e+08 + 9900;
}
===[STUDENT TESTS/bad10.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad10.bminor Output]===
resolving...
a resolves to param 1
b resolves to param 2
a resolves to param 1
b resolves to param 2
x resolves to global x
x resolves to global x
z resolves to param 1
y resolves to local 2
x resolves to global x
y resolves to local 2
b resolves to global b
c resolves to local 3
s resolves to global s
d resolves to local 4
z resolves to param 1
y resolves to local 2
x resolves to global x
y resolves to local 2
min resolves to global min
a resolves to local 5
a resolves to local 5

type checking...
type error: cannot perform arithmetic operation
			3.41e+08+9900: cannot add 9900 which is of type integer to 3.41e+08 which is of type float




===[STUDENT TESTS/bad2.bminor Input]===
main: function integer (b: boolean) = {
        return 0;
}

f: function boolean (b: boolean) = {
    return main(true);
}

===[STUDENT TESTS/bad2.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad2.bminor Output]===
resolving...
main resolves to global main

type checking...
type error: return type does not match function declaration type
			function f expects return type of boolean but received type of integer




===[STUDENT TESTS/bad3.bminor Input]===
// missing return
f: function string (x: integer) = {
    x = x + 1;
}

===[STUDENT TESTS/bad3.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad3.bminor Output]===
resolving...
x resolves to param 1
x resolves to param 1

type checking...
type error: non-void function must have return
			function f is declared with return type string




===[STUDENT TESTS/bad4.bminor Input]===
// if statements without boolean in the condition
f: function boolean (x: string) = {
    if (x) {
        return true;
    }
    else if (!x) {
        return false;
    }
}

===[STUDENT TESTS/bad4.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad4.bminor Output]===
resolving...
x resolves to param 1
x resolves to param 1

type checking...
type error: if statement cannot have non-boolean condition
			if (x): expects a boolean expression but received type of string
type error: cannot perform logical operator for non-boolean values
			!x: x is type of string
type error: if statement cannot have non-boolean condition
			if (!x): expects a boolean expression but received type of string




===[STUDENT TESTS/bad5.bminor Input]===
// compare different types
f: function void () = {
    x: integer = 10;
    y: boolean = false;
    print x > y || (3 == "string");
}

===[STUDENT TESTS/bad5.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad5.bminor Output]===
resolving...
x resolves to local 1
y resolves to local 2

type checking...
type error: cannot compare different types
			x>y: x is type of integer but y is type of boolean
type error: cannot compare different types
			3=="string": 3 is type of integer but "string" is type of string




===[STUDENT TESTS/bad6.bminor Input]===
num: array [6] char = {1, -10, -40, -175, 0, 0};

main:function integer () = {
	num[5] = -123;
}
===[STUDENT TESTS/bad6.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad6.bminor Output]===
resolving...
num resolves to global num

type checking...
type error: declaraction type and value type do not match
			cannot assign num which is of type array[6] char to {1, -10, -40, -175, 0, 0} which is of type array[6] integer
type error: cannot assign different types
			cannot assign -123 which has type of integer to num[5] which has type of char




===[STUDENT TESTS/bad7.bminor Input]===
main:function integer () = {
	i: integer = 0;
	for (i = 0;i;i++) { // non-boolean expression
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}
===[STUDENT TESTS/bad7.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad7.bminor Output]===
resolving...
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1

type checking...
type error: for statement must have a boolean condition
			for (i=0;i;i++): expects the second expression to be boolean but received type of integer




===[STUDENT TESTS/bad8.bminor Input]===
ComputeAscii: function char ( c: char );
GetLength: function integer ( s: string, i: integer );
GetArea: function integer ( width: float, height: float ) = {
	return width * height;
}

===[STUDENT TESTS/bad8.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad8.bminor Output]===
resolving...
width resolves to param 1
height resolves to param 2

type checking...
type error: return type does not match function declaration type
			function GetArea expects return type of integer but received type of float




===[STUDENT TESTS/bad9.bminor Input]===
f1: function void() = {
	i : integer;
	return i;
}

f2: function integer() = {
	return;
}
===[STUDENT TESTS/bad9.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad9.bminor Output]===
resolving...
i resolves to local 1

type checking...
type error: return type does not match function declaration type
			function f1 expects return type of void but received type of integer
type error: return type does not match function declaration type
			function f2 expects return type of integer but received type of void




=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/*
Correct: The parameter name can vary as long as the type is the same.
*/

x: function integer(a:integer);

x: function integer(b:integer) = {
	return 0;
}

x: function integer(c:integer);

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
resolving...

type checking...
no type error




===[HIDDEN TESTS/good2.bminor Input]===
/*
Correct: Test various nested definitions.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	print x;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
resolving...
x resolves to local 1
x resolves to local 1
x resolves to local 2
x resolves to local 1

type checking...
no type error




===[HIDDEN TESTS/good3.bminor Input]===
/*
Correct: Test various function return types.
*/

A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	i: integer;
	for (i = 0; i < 10; i++)
		if (i % 2 == 0)
			print i;
		else
			return i;

	if (A(B('d') - 1, 10)) {
		x: integer = 0;
		return 2 * B('c') + x;
	}

	return B(C("hello")) % 3;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
resolving...
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
A resolves to global A
B resolves to global B
B resolves to global B
x resolves to local 2
B resolves to global B
C resolves to global C

type checking...
no type error




===[HIDDEN TESTS/good4.bminor Input]===
/*
Correct: Test combinations of boolean operators.
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -b;
	print c && d;
	print a + b * a - a ^ b /a;

	print a < b && d;
	print (a < b) || (c && d);
}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
resolving...
a resolves to param 1
b resolves to param 2
c resolves to param 3
d resolves to param 4
a resolves to param 1
b resolves to param 2
a resolves to param 1
a resolves to param 1
b resolves to param 2
a resolves to param 1
a resolves to param 1
b resolves to param 2
d resolves to param 4
a resolves to param 1
b resolves to param 2
c resolves to param 3
d resolves to param 4

type checking...
no type error




===[HIDDEN TESTS/good5.bminor Input]===
/*
Correct: Test array assignments.
*/

x:array [5] integer = {1,2,3,4,5};
y:array [5] array [5] integer;

main:function void () =
{
	y[1] = x;
	count:integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
resolving...
y resolves to global y
x resolves to global x
count resolves to local 1
count resolves to local 1
count resolves to local 1
y resolves to global y
count resolves to local 1
x resolves to global x

type checking...
no type error




===[HIDDEN TESTS/good7.bminor Input]===
/*
Correct: Test if-expression and return-expression.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	if (!n) return 0; else return -m;

	print 10 * (-1 + m);
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
resolving...
n resolves to local 2
m resolves to local 1
m resolves to local 1

type checking...
no type error




===[HIDDEN TESTS/good8.bminor Input]===
/*
Correct: Boolean expression in several places.
*/

x: function integer(a:boolean) = {
	if (a) for (;a;) print a;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 1
TEST NOT PASSED

===[HIDDEN TESTS/good8.bminor Output]===
resolving...
a resolves to param 1
a resolves to param 1
a resolves to param 1

type checking...
type error: non-void function must have return
			function x is declared with return type integer




===[HIDDEN TESTS/good9.bminor Input]===
/*
Correct: A program to plot a quadratic function. 
*/

/* Make use of atoi from the standard library */

atoi: function integer( s: string );

quadratic: function integer ( a: integer, b: integer, c: integer, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
resolving...
a resolves to param 1
x resolves to param 4
x resolves to param 4
b resolves to param 2
x resolves to param 4
c resolves to param 3
x resolves to param 4
argc resolves to param 1
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
x resolves to local 8
start resolves to local 6
x resolves to local 8
end resolves to local 7
x resolves to local 8
x resolves to local 8
quadratic resolves to global quadratic
a resolves to local 3
b resolves to local 4
c resolves to local 5
x resolves to local 8

type checking...
no type error




===[HIDDEN TESTS/good10.bminor Input]===
/*

Testing float typechecking

*/

main: function integer() = {
    m: float = 3.1;
    n: float = 5.2;
    
    x: float = m + n;

    print x;
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
resolving...
m resolves to local 1
n resolves to local 2
x resolves to local 3

type checking...
no type error




===[HIDDEN TESTS/good6.bminor Input]===
/*
Correct: Test assignment of array literals.
*/

main: function void (a: integer) = {
	x: array [1] boolean;
	y: array [1] integer;
	if (x[y[a]]) return;
	{
		z: integer;
		zz: integer = z;
	}
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
resolving...
x resolves to local 2
y resolves to local 3
a resolves to param 1
z resolves to local 4

type checking...
no type error




====Bad Tests====
===[HIDDEN TESTS/bad1.bminor Input]===
/*
Incorrect: Mismatched types in forward declaration
*/

x: function integer(a:char);
x: function integer(a:integer) = {
	return 0;
}

===[HIDDEN TESTS/bad1.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad1.bminor Output]===
resolving...
resolve error: type x does not match




===[HIDDEN TESTS/bad2.bminor Input]===
/*
Incorrect: Variable redefined within a scope.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	x: integer = 2;
	print x;
}

===[HIDDEN TESTS/bad2.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad2.bminor Output]===
resolving...
x resolves to local 1
x resolves to local 1
x resolves to local 2
resolve error: x is already defined
x resolves to local 1




===[HIDDEN TESTS/bad3.bminor Input]===
/*
Incorrect: Mismatched function return types.
*/

main: function void() = {
	return i;
}

func: function integer() = {
	return;
}

===[HIDDEN TESTS/bad3.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad3.bminor Output]===
resolving...
resolve error: i is not defined




===[HIDDEN TESTS/bad4.bminor Input]===
/*
Incorrect: Mismatched operators.
*/


func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -c;
	print c * d;
	print a + b * a - a ^ b /d;

	print a < b && a;
	print (a < b) + (c && d);
}

===[HIDDEN TESTS/bad4.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad4.bminor Output]===
resolving...
a resolves to param 1
c resolves to param 3
c resolves to param 3
d resolves to param 4
a resolves to param 1
b resolves to param 2
a resolves to param 1
a resolves to param 1
b resolves to param 2
d resolves to param 4
a resolves to param 1
b resolves to param 2
a resolves to param 1
a resolves to param 1
b resolves to param 2
c resolves to param 3
d resolves to param 4

type checking...
type error: cannot perform arithmetic operation
			a-c: cannot subtract c which is of type boolean from a which is of type integer
type error: cannot perform arithmetic operation
			c*d: cannot multiply c which is of type boolean by d which is of type boolean
type error: cannot perform arithmetic operation
			a^b/d: cannot divide a^b which is of type integer by d which is of type boolean
type error: cannot perform logical operator for non-boolean values
			a<b&&a: a<b is type of boolean but a is type of integer
type error: cannot perform arithmetic operation
			(a<b)+(c&&d): cannot add c&&d which is of type boolean to a<b which is of type boolean




===[HIDDEN TESTS/bad5.bminor Input]===
/*
Incorrect: Cannot subscript a value which is not an array.
*/

main: function void() = {
	s : boolean = false;
	c : char = s[1];
	print c;
}

===[HIDDEN TESTS/bad5.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad5.bminor Output]===
resolving...
s resolves to local 1
c resolves to local 2

type checking...
type error: cannot index non-arrays
			s[1]
type error: declaraction type and value type do not match
			cannot assign c which is of type char to s[1] which is of type boolean




===[HIDDEN TESTS/bad6.bminor Input]===
/*
Incorrect: Cannot assign an array to an atomic type.
*/

main: function void () = {
	// array of one boolean != boolean
	x: array [1] boolean = {true};
	if (x) return;
}

===[HIDDEN TESTS/bad6.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad6.bminor Output]===
resolving...
x resolves to local 1

type checking...
type error: only global arrays may have an initializer
			x: array[1] boolean = {true};
type error: if statement cannot have non-boolean condition
			if (x): expects a boolean expression but received type of array[1] boolean




===[HIDDEN TESTS/bad7.bminor Input]===
/*
Incorrect: Improper operators on values.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	// wrong negation
	if (-n) return 0; else return !m;

	// arithmetic on boolean
	print 10 * (-1 + n);
}

===[HIDDEN TESTS/bad7.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad7.bminor Output]===
resolving...
n resolves to local 2
m resolves to local 1
n resolves to local 2

type checking...
type error: cannot use negation operator for non-numeric values
			-n: n is type of boolean
type error: cannot perform logical operator for non-boolean values
			!m: m is type of integer
type error: cannot perform arithmetic operation
			-1+n: cannot add n which is of type boolean to -1 which is of type integer




===[HIDDEN TESTS/bad8.bminor Input]===
/*
Incorrect: Cannot use an integer in place of a boolean.
*/

x: function integer(a:integer) = {
	if (a) return 10;
	for (;a;) print a;
}

===[HIDDEN TESTS/bad8.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad8.bminor Output]===
resolving...
a resolves to param 1
a resolves to param 1
a resolves to param 1

type checking...
type error: if statement cannot have non-boolean condition
			if (a): expects a boolean expression but received type of integer
type error: for statement must have a boolean condition
			for (;a;): expects the second expression to be boolean but received type of integer




===[HIDDEN TESTS/bad9.bminor Input]===
/*
Incorrect: Several type mismatches throughout.
*/

/* Make use of atoi from the standard library */

atoi: function boolean ( s: string );

quadratic: function void ( a: char, b: string, c: boolean, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[HIDDEN TESTS/bad9.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad9.bminor Output]===
resolving...
a resolves to param 1
x resolves to param 4
x resolves to param 4
b resolves to param 2
x resolves to param 4
c resolves to param 3
x resolves to param 4
argc resolves to param 1
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
atoi resolves to global atoi
argv resolves to param 2
x resolves to local 8
start resolves to local 6
x resolves to local 8
end resolves to local 7
x resolves to local 8
x resolves to local 8
quadratic resolves to global quadratic
a resolves to local 3
b resolves to local 4
c resolves to local 5
x resolves to local 8

type checking...
type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x: cannot multiply a*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
char by x which is of type integer
type error: cannot perform arithmetic operation
			b*x: cannot multiply b which is of type string by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x+b*x: cannot add b*x which is of type type error: cannot perform arithmetic operation
			b*x: cannot multiply b which is of type string by x which is of type integer
string to a*x*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x: cannot multiply a*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
char by x which is of type integer
char
type error: cannot perform arithmetic operation
			c*x: cannot multiply c which is of type boolean by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x+b*x+c*x: cannot add c*x which is of type type error: cannot perform arithmetic operation
			c*x: cannot multiply c which is of type boolean by x which is of type integer
boolean to a*x*x+b*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x: cannot multiply a*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
char by x which is of type integer
type error: cannot perform arithmetic operation
			b*x: cannot multiply b which is of type string by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x+b*x: cannot add b*x which is of type type error: cannot perform arithmetic operation
			b*x: cannot multiply b which is of type string by x which is of type integer
string to a*x*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
type error: cannot perform arithmetic operation
			a*x*x: cannot multiply a*x which is of type type error: cannot perform arithmetic operation
			a*x: cannot multiply a which is of type char by x which is of type integer
char by x which is of type integer
char
char
type error: return type does not match function declaration type
			function quadratic expects return type of void but received type of char
type error: declaraction type and value type do not match
			cannot assign a which is of type integer to atoi(argv[0]) which is of type boolean
type error: declaraction type and value type do not match
			cannot assign b which is of type integer to atoi(argv[1]) which is of type boolean
type error: declaraction type and value type do not match
			cannot assign c which is of type integer to atoi(argv[2]) which is of type boolean
type error: declaraction type and value type do not match
			cannot assign start which is of type integer to atoi(argv[3]) which is of type boolean
type error: declaraction type and value type do not match
			cannot assign end which is of type integer to atoi(argv[4]) which is of type boolean




===[HIDDEN TESTS/bad10.bminor Input]===
/*
Incorrect: Several type errors throughout.
*/

abs: function string (n: integer);

digits: array [6] char = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: boolean = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';
        z: float = 1.0 + 2;
	return 0;
}

===[HIDDEN TESTS/bad10.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad10.bminor Output]===
resolving...
digits resolves to global digits
abs resolves to global abs
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
digits resolves to global digits
i resolves to local 1
i resolves to local 1
i resolves to local 1

type checking...
type error: declaraction type and value type do not match
			cannot assign digits which is of type array[6] char to {14, 8, 6168, 42, 0, 74546} which is of type array[6] integer
type error: cannot assign different types
			cannot assign -468 which has type of integer to digits[4] which has type of char
type error: declaraction type and value type do not match
			cannot assign i which is of type boolean to 0 which is of type integer
type error: index of array must be an integer
			digits[i]:i should be of type integer, but is of type boolean
type error: params do not match with definition
			abs(digits[i]): abs expects type of integer but received digits[i] is a type error: index of array must be an integer
			digits[i]:i should be of type integer, but is of type boolean
char
type error: index of array must be an integer
			digits[i]:i should be of type integer, but is of type boolean
type error: cannot compare different types
			abs(digits[i])==digits[i]: abs(digits[i]) is type of string but digits[i] is type of char
type error: index of array must be an integer
			digits[i]:i should be of type integer, but is of type boolean
type error: cannot perform arithmetic operation
			i+1: cannot add 1 which is of type integer to i which is of type boolean
type error: cannot perform arithmetic operation
			1+2: cannot add 2 which is of type integer to 1 which is of type float




===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 11,
      "incorrect": 0
    },
    "Bad": {
      "correct": 11,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 9,
      "incorrect": 1
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

Continued correctness of the -scan, -parse, -print, and -resolve options (30/30 points)
----------------------------------------------
Scanning, parsing, printing, and resolving all seem to be correct.

General correctness of the -typecheck option. (20/20 points)
----------------------------------------------
Typechecking looks to be done correctly

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
You required the failing test case to have a return statement, thats okay.

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
